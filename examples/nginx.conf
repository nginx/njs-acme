daemon off;
user nginx;

load_module modules/ngx_http_js_module.so;

error_log /dev/stdout debug;

events {
}

http {
  js_path "/usr/lib/nginx/njs_modules/";
  js_fetch_trusted_certificate /etc/ssl/certs/ISRG_Root_X1.pem;

  js_import acme from acme.js;

  # One `resolver` directive must be defined.
  resolver 127.0.0.11 ipv6=off; # docker-compose
  # resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
  # resolver 8.8.8.8 8.8.4.4; # Google
  # resolver 172.16.0.23; # AWS EC2 Classic
  # resolver 169.254.169.253; # AWS VPC
  resolver_timeout 5s;

  ## advanced use-case for njs-acme to optionally use shared dict to cache cert/key pairs
  # then provide the same zone name in $njs_acme_shared_dict_zone_name
  # zone size should be enough to store all certs and keys; 1MB should be enough to store 100 certs/keys
  js_shared_dict_zone zone=acme:1m;

  server {
    listen 0.0.0.0:8000; # testing with 8000 should be 80 in prod, pebble usees httpPort in dev/pebble/config.json
    listen 443 ssl;
    server_name proxy.nginx.com;

    # The full set of configuration variables. These can also be defined in
    # environment variables. Use the same name as below, just UPPER_CASE.
    ## Mandatory Variables
    js_var $njs_acme_server_names "proxy.nginx.com proxy2.nginx.com";
    js_var $njs_acme_account_email "test@example.com";

    ## Optional Variables
    # js_var $njs_acme_dir /etc/nginx/njs-acme;
    # js_var $njs_acme_challenge_dir /etc/nginx/njs-acme/challenge;
    # js_var $njs_acme_account_private_jwk /etc/nginx/njs-acme/account_private_key.json;
    # js_var $njs_acme_directory_uri https://pebble/dir;
    # js_var $njs_acme_verify_provider_https false;

    ## advanced use-case
    # # use a `js_shared_dict_zone` to store certs/keys in memory
    js_var $njs_acme_shared_dict_zone_name acme;

    js_set $dynamic_ssl_cert acme.js_cert;
    js_set $dynamic_ssl_key acme.js_key;



    ssl_certificate data:$dynamic_ssl_cert;
    ssl_certificate_key data:$dynamic_ssl_key;

    location = / {
      return 200 "hello server_name:$server_name\nssl_session_id:$ssl_session_id\n";
    }

    location ~ "^/\.well-known/acme-challenge/[-_A-Za-z0-9]{22,128}$" {
      js_content acme.challengeResponse;
    }

    location = /acme/auto {
      js_content acme.clientAutoMode;
    }

    location = /csr/new {
      js_content acme.createCsrHandler;
    }

    location = /acme/new-acct {
      js_content acme.acmeNewAccount;
    }
  }
}
