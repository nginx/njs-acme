daemon off;
user nginx;

load_module modules/ngx_http_js_module.so;

error_log /dev/stdout debug;

events {
}

http {
  js_path "/usr/lib/nginx/njs_modules/";
  js_fetch_trusted_certificate /etc/ssl/certs/ISRG_Root_X1.pem;

  # Read the .js file into the `acme` namespace.
  js_import acme from acme.js;

  # IMPORTANT: One `resolver` directive *must* be defined.
  resolver 127.0.0.11 ipv6=off; # docker-compose
  # resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
  # resolver 8.8.8.8 8.8.4.4; # Google
  # resolver 172.16.0.23; # AWS EC2 Classic
  # resolver 169.254.169.253; # AWS VPC
  resolver_timeout 5s;

  ##
  # `njs-acme` can use a shared dict to cache cert/key pairs to avoid
  # filesystem calls on TLS handshake.  If you want to use a shared zone name
  # that is not `acme`, then ensure the variable $njs_acme_shared_dict_zone_name
  # also contains the desired name.  The zone size should beenough to store all
  # certs and keys. 1MB should be enough to store 100 certs/keys.
  js_shared_dict_zone zone=acme:1m;

  ##
  # Set up a specific server to listen on the localhost interface for
  # js_periodic to trigger acme.clientAutoMode. The default URL is
  # http://localhost:10999/acme/auto but can be overriden via the
  # NJS_ACME_CLIENT_AUTO_MODE_URL environment variable.
  server {
    listen 127.0.0.1:10999;
    # Check for certificate expiration every minute
    location @acmePeriodicAuto {
      js_periodic acme.periodicAuto interval=1m;
    }

    location = /acme/auto {
      js_content acme.clientAutoMode;
    }
  }

  server {
    listen 80;
    listen 443 ssl;
    server_name _default;

    ## Mandatory Variables
    # These, and other variables, may also be defined in
    # environment variables, just without the leading dollar sign and with the
    # variable name in upper case, e.g.  `NJS_ACME_SERVER_NAMES`.
    js_var $njs_acme_server_names 'proxy.nginx.com proxy2.nginx.com';
    js_var $njs_acme_account_email 'test@example.com';

    ## Optional Variables and their defaults.
    # js_var $njs_acme_dir /etc/nginx/njs-acme;
    # js_var $njs_acme_challenge_dir /etc/nginx/njs-acme/challenge;
    # js_var $njs_acme_account_private_jwk /etc/nginx/njs-acme/account_private_key.json;
    # js_var $njs_acme_directory_uri https://acme-staging-v02.api.letsencrypt.org/directory;
    # js_var $njs_acme_verify_provider_https true;
    # js_var $njs_acme_shared_dict_zone_name acme;


    # Stores the key/cert content in these variables.
    js_set $dynamic_ssl_cert acme.js_cert;
    js_set $dynamic_ssl_key acme.js_key;

    # Uses the key/cert stored in variables for HTTPS
    ssl_certificate data:$dynamic_ssl_cert;
    ssl_certificate_key data:$dynamic_ssl_key;

    # Respond to ACME challenges
    location ~ "^/\.well-known/acme-challenge/[-_A-Za-z0-9]{22,128}$" {
      js_content acme.challengeResponse;
    }

    # Your location(s) go here
    location = / {
      return 200 "hello server_name:$server_name\nssl_session_id:$ssl_session_id\n";
    }

    ## ADVANCED USAGE BELOW
    # You can define your own workflows using njs-acme as an ACME client
    # library if the /acme/auto handler does not meet your needs. Here are two
    # examples of endpoints mapped to granular steps in the request/renewal
    # process.

    # Optional endpoint to create a certificate request
    # (handled automatically in /acme/auto)
    location = /csr/new {
      js_content acme.createCsrHandler;
    }

    # Optional endpoint to create an ACME account
    # (handled automatically in /acme/auto)
    location = /acme/new-acct {
      js_content acme.acmeNewAccount;
    }
  }
}
